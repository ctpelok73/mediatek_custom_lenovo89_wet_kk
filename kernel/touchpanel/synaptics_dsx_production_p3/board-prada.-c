/*
 * Board support file for OMAP4430 based PandaBoard.
 *
 * Copyright (C) 2010 Texas Instruments
 *
 * Author: David Anders <x0132446@ti.com>
 *
 * Based on mach-omap2/board-4430sdp.c
 *
 * Author: Santosh Shilimkar <santosh.shilimkar@ti.com>
 *
 * Based on mach-omap2/board-3430sdp.c
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#include <cust_eint.h>
#include <linux/sched.h>
#include <linux/kthread.h>
#include <linux/rtpm_prio.h>
#include <linux/wait.h>
#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/slab.h>
#include <linux/i2c.h>
#include <linux/interrupt.h>
#include <linux/delay.h>
#include "tpd_custom_synaptics_rmi4.h"
#include "cust_gpio_usage.h"
#include "tpd.h"
#include <linux/input.h>
#include <linux/gpio.h>
#include <linux/regulator/consumer.h>
//#include <linux/input/synaptics_dsx.h>
#include "synaptics_dsx.h"
#include "synaptics_dsx_i2c.h"

#include <mach/mt_pm_ldo.h>
#include <mach/mt_typedefs.h>
#include <mach/mt_boot.h>
/*
#include <mach/hardware.h>
#include <mach/omap4-common.h>
#include <mach/emif.h>
#include <mach/lpddr2-elpida.h>
#include <mach/dmm.h>

#include <asm/mach-types.h>
#include <asm/mach/arch.h>
#include <asm/mach/map.h>
#include <video/omapdss.h>

#include <plat/board.h>
#include <plat/common.h>
#include <plat/usb.h>
#include <plat/mmc.h>
#include <plat/remoteproc.h>
#include <plat/vram.h>
#include <video/omap-panel-generic-dpi.h>
#include "timer-gp.h"

#include "hsmmc.h"
#include "control.h"
#include "mux.h"
#include "common-board-devices.h"
#include "prm-regbits-44xx.h"
#include "prm44xx.h"
#include "pm.h"
#include "resetreason.h"
*/


//#define TM1940 (1)
//#define TM2448 (2)
//#define S3203 (1)
//#define SYNAPTICS_MODULE S3203

//#define PANDA_RAMCONSOLE_START	(PLAT_PHYS_OFFSET + SZ_512M)
//#define PANDA_RAMCONSOLE_SIZE	SZ_2M

//#define GPIO_HUB_POWER		1
//#define GPIO_HUB_NRESET		62
//#define GPIO_WIFI_PMENA		43
//#define GPIO_WIFI_IRQ		53
//#define HDMI_GPIO_CT_CP_HPD     60
//#define HDMI_GPIO_HPD 63 /* Hot plug pin for HDMI */
//#define HDMI_GPIO_LS_OE 41 /* Level shifter for HDMI */
//#define TPS62361_GPIO   7 /* VCORE1 power control */
//#define PANDA_BT_GPIO 46


//#define PHYS_ADDR_SMC_SIZE	(SZ_1M * 3)
//#define PHYS_ADDR_SMC_MEM	(0x80000000 + SZ_1G - PHYS_ADDR_SMC_SIZE)
//#define OMAP_ION_HEAP_SECURE_INPUT_SIZE	(SZ_1M * 90)
//#define PHYS_ADDR_DUCATI_SIZE	(SZ_1M * 105)
//#define PHYS_ADDR_DUCATI_MEM	(PHYS_ADDR_SMC_MEM - PHYS_ADDR_DUCATI_SIZE - OMAP_ION_HEAP_SECURE_INPUT_SIZE)

//#define WILINK_UART_DEV_NAME	"/dev/ttyO1"

/* Synaptics changes for Panda Board */
static int synaptics_gpio_setup(int gpio, bool configure, int dir, int state);

//#if (SYNAPTICS_MODULE == S3203)
#define DSX_I2C_ADDR 0x38
#define DSX_ATTN_GPIO GPIO_CTP_EINT_PIN
#define DSX_ATTN_MUX_NAME "gpmc_ad15.gpio_39"
#define DSX_POWER_GPIO -1
#define DSX_POWER_ON_STATE 1
#define DSX_POWER_DELAY_MS 160
#define DSX_RESET_GPIO GPIO_CTP_RST_PIN
#define DSX_RESET_ON_STATE 0
#define DSX_RESET_DELAY_MS 100
#define DSX_RESET_ACTIVE_MS 20
#define DSX_IRQ_FLAGS EINTF_TRIGGER_FALLING
static unsigned char regulator_name[] = "";
static unsigned char cap_button_codes[] =
		{KEY_MENU, KEY_HOME, KEY_BACK};
//#endif

static struct synaptics_dsx_cap_button_map cap_button_map = {
	.nbuttons = ARRAY_SIZE(cap_button_codes),
	.map = cap_button_codes,
};

static struct synaptics_dsx_platform_data dsx_platformdata = {
	.irq_gpio = DSX_ATTN_GPIO,
	.irq_flags = DSX_IRQ_FLAGS,
	.power_gpio = DSX_POWER_GPIO,
	.power_on_state = DSX_POWER_ON_STATE,
	.power_delay_ms = DSX_POWER_DELAY_MS,
	.reset_gpio = DSX_RESET_GPIO,
	.reset_on_state = DSX_RESET_ON_STATE,
	.reset_delay_ms = DSX_RESET_DELAY_MS,
	.reset_active_ms = DSX_RESET_ACTIVE_MS,
 	.gpio_config = synaptics_gpio_setup,
 	.regulator_name = regulator_name,
 	.cap_button_map = &cap_button_map,
};

static struct i2c_board_info bus4_i2c_devices[] = {
	{
		I2C_BOARD_INFO("synaptics_dsx_i2c", DSX_I2C_ADDR),
		.platform_data = &dsx_platformdata,
	},
};

static int synaptics_gpio_setup(int gpio, bool configure, int dir, int state)
{
	int retval = 0;
	unsigned char buf[16];

	if (configure) {
		snprintf(buf, PAGE_SIZE, "dsx_gpio_%u\n", gpio);

		retval = gpio_request(gpio, buf);
		if (retval) {
			pr_err("%s: Failed to get gpio %d (code: %d)",
					__func__, gpio, retval);
			return retval;
		}

		if (dir == 0)
			retval = gpio_direction_input(gpio);
		else
			retval = gpio_direction_output(gpio, state);
		if (retval) {
			pr_err("%s: Failed to set gpio %d direction",
					__func__, gpio);
			return retval;
		}
	} else {
		gpio_free(gpio);
	}

	return retval;
}

static void synaptics_gpio_init(void)
{
/*#ifdef DSX_ATTN_MUX_NAME
		omap_mux_init_signal(DSX_ATTN_MUX_NAME, OMAP_PIN_INPUT_PULLUP);
#endif
#ifdef DSX_POWER_MUX_NAME
		omap_mux_init_signal(DSX_POWER_MUX_NAME, OMAP_PIN_OUTPUT);
#endif
#ifdef DSX_RESET_MUX_NAME
		omap_mux_init_signal(DSX_RESET_MUX_NAME, OMAP_PIN_OUTPUT);
#endif*/
	return;
}
/* End of Synaptics changes for Panda Board */

